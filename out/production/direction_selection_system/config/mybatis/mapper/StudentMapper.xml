<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiao.programmer.dao.StudentMapper">
  <resultMap id="BaseResultMap" type="com.xiao.programmer.entity.Student">
    <id column="sId" jdbcType="VARCHAR" property="sid" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="gender" jdbcType="VARCHAR" property="gender" />
    <result column="profession" jdbcType="VARCHAR" property="profession" />
    <result column="branchId" jdbcType="VARCHAR" property="branchid" />
    <result column="clazz" jdbcType="VARCHAR" property="clazz" />
    <result column="email" jdbcType="VARCHAR" property="email" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    sId, name, gender, profession, branchId, clazz, email
  </sql>
  <select id="selectByExample" parameterType="com.xiao.programmer.entity.StudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student
    where sId = #{sid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from student
    where sId = #{sid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.xiao.programmer.entity.StudentExample">
    delete from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xiao.programmer.entity.Student">
    insert into student (sId, name, gender, 
      profession, branchId, clazz, 
      email)
    values (#{sid,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{gender,jdbcType=VARCHAR}, 
      #{profession,jdbcType=VARCHAR}, #{branchid,jdbcType=VARCHAR}, #{clazz,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xiao.programmer.entity.Student">
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="sid != null">
        sId,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="profession != null">
        profession,
      </if>
      <if test="branchid != null">
        branchId,
      </if>
      <if test="clazz != null">
        clazz,
      </if>
      <if test="email != null">
        email,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="sid != null">
        #{sid,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=VARCHAR},
      </if>
      <if test="profession != null">
        #{profession,jdbcType=VARCHAR},
      </if>
      <if test="branchid != null">
        #{branchid,jdbcType=VARCHAR},
      </if>
      <if test="clazz != null">
        #{clazz,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xiao.programmer.entity.StudentExample" resultType="java.lang.Long">
    select count(*) from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update student
    <set>
      <if test="record.sid != null">
        sId = #{record.sid,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.gender != null">
        gender = #{record.gender,jdbcType=VARCHAR},
      </if>
      <if test="record.profession != null">
        profession = #{record.profession,jdbcType=VARCHAR},
      </if>
      <if test="record.branchid != null">
        branchId = #{record.branchid,jdbcType=VARCHAR},
      </if>
      <if test="record.clazz != null">
        clazz = #{record.clazz,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update student
    set sId = #{record.sid,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=VARCHAR},
      profession = #{record.profession,jdbcType=VARCHAR},
      branchId = #{record.branchid,jdbcType=VARCHAR},
      clazz = #{record.clazz,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xiao.programmer.entity.Student">
    update student
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=VARCHAR},
      </if>
      <if test="profession != null">
        profession = #{profession,jdbcType=VARCHAR},
      </if>
      <if test="branchid != null">
        branchId = #{branchid,jdbcType=VARCHAR},
      </if>
      <if test="clazz != null">
        clazz = #{clazz,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
    </set>
    where sId = #{sid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xiao.programmer.entity.Student">
    update student
    set name = #{name,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=VARCHAR},
      profession = #{profession,jdbcType=VARCHAR},
      branchId = #{branchid,jdbcType=VARCHAR},
      clazz = #{clazz,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR}
    where sId = #{sid,jdbcType=VARCHAR}
  </update>
  <!-- 选择专业后修改学生专业信息 -->
  <update id="updateBranchIdBySid">
        UPDATE student SET branchId = #{branchId} WHERE sId = #{sId}
    </update>

  <!-- 获取学生个人学籍信息(联合查询) -->
  <select id="getListBySIdWithBranch" resultMap="WithBranchResultMap" parameterType="java.lang.String">
        SELECT s.sId, s.name, s.gender, s.profession, s.branchId, s.clazz, s.email, b.branchId, b.name as bname, b.courseId, b.selected, b.limited FROM student s, branch b WHERE s.branchId = b.branchId AND s.sId = #{sId}
    </select>
  <resultMap id="WithBranchResultMap" type="com.xiao.programmer.entity.Student">
    <id column="sId" jdbcType="VARCHAR" property="sid"/>
    <result column="name" jdbcType="VARCHAR" property="name"/>
    <result column="gender" jdbcType="VARCHAR" property="gender"/>
    <result column="profession" jdbcType="VARCHAR" property="profession"/>
    <result column="branchId" jdbcType="VARCHAR" property="branchid"/>
    <result column="clazz" jdbcType="VARCHAR" property="clazz"/>
    <result column="email" jdbcType="VARCHAR" property="email"/>
    <!-- 联合查询 -->
    <association property="branch" javaType="com.xiao.programmer.entity.Branch">
      <id column="branchId" property="branchid"/>
      <result column="bname" property="name"/>
      <result column="courseId" property="courseid"/>
      <result column="selected" property="selected"/>
      <result column="limited" property="limited"/>
    </association>
  </resultMap>
  <!-- 置空已选方向ID（退选） -->
  <update id="quitBySid">
  UPDATE student SET branchid = NULL WHERE sId = #{sid}
  </update>

  <!-- 查询用户列表 -->
  <select id="findList" parameterType="Map" resultType="com.xiao.programmer.entity.Student">
    select * from student where sid like #{sid} limit #{offset},#{pageSize}
  </select>

  <!-- 获取专业信息(联合查询，附上课程信息) -->
  <select id="findListWithBranch" resultMap="WithBranchResultMap">
        SELECT s.sId, s.name, s.gender, s.profession, s.branchId, s.clazz, s.email, b.branchId, b.name as bname, b.courseId, b.selected, b.limited FROM student s LEFT JOIN branch b ON s.branchId = b.branchId where sid like #{sid} limit #{offset},#{pageSize}
    </select>
</mapper>