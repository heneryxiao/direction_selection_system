<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiao.programmer.dao.extend.StudentMapperExtend">
    <resultMap id="BaseResultMap" type="com.xiao.programmer.entity.origin.Student">
        <id column="sId" jdbcType="VARCHAR" property="sid"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="gender" jdbcType="VARCHAR" property="gender"/>
        <result column="profession" jdbcType="VARCHAR" property="profession"/>
        <result column="branchId" jdbcType="VARCHAR" property="branchid"/>
        <result column="clazz" jdbcType="VARCHAR" property="clazz"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    sId, name, gender, profession, branchId, clazz, email
  </sql>
    <!-- 选择专业后修改学生专业信息 -->
    <update id="updateBranchIdBySid">
        UPDATE student SET branchId = #{branchId} WHERE sId = #{sId}
    </update>

    <!-- 获取学生个人学籍信息(联合查询) -->
    <select id="getListBySIdWithBranch" resultMap="WithBranchResultMap" parameterType="java.lang.String">
        SELECT s.sId, s.name, s.gender, s.profession, s.branchId, s.clazz, s.email, b.branchId, b.name as bname, b.selected, b.limited FROM student s, branch b WHERE s.branchId = b.branchId AND s.sId = #{sId}
    </select>
    <resultMap id="WithBranchResultMap" type="com.xiao.programmer.entity.origin.Student">
        <id column="sId" jdbcType="VARCHAR" property="sid"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="gender" jdbcType="VARCHAR" property="gender"/>
        <result column="profession" jdbcType="VARCHAR" property="profession"/>
        <result column="branchId" jdbcType="VARCHAR" property="branchid"/>
        <result column="clazz" jdbcType="VARCHAR" property="clazz"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <!-- 联合查询 -->
        <association property="branch" javaType="com.xiao.programmer.entity.origin.Branch">
            <id column="branchId" property="branchid"/>
            <result column="bname" property="name"/>
            <result column="selected" property="selected"/>
            <result column="limited" property="limited"/>
        </association>
    </resultMap>
    <!-- 置空已选方向ID（退选） -->
    <update id="quitBySid">
  UPDATE student SET branchid = NULL WHERE sId = #{sid}
  </update>

    <!-- 查询用户列表 -->
    <select id="findList" parameterType="Map" resultType="com.xiao.programmer.entity.origin.Student">
    select * from student where sid like #{sid} limit #{offset},#{pageSize}
  </select>

    <!-- 获取专业信息(联合查询，附上课程信息) -->
    <select id="findListWithBranch" resultMap="WithBranchResultMap">
        SELECT s.sId, s.name, s.gender, s.profession, s.branchId, s.clazz, s.email, b.branchId, b.name as bname,  b.selected, b.limited FROM student s LEFT JOIN branch b ON s.branchId = b.branchId where sid like #{sid} limit #{offset},#{pageSize}
    </select>

    <!-- 根据老师id查询所教的学生列表(附上方向信息) -->
  <select id="selectStudentListWithBranchByTid" resultMap="WithBranchResultMap" parameterType="java.lang.String">
      SELECT s.sId, s.name, s.gender, s.profession, s.branchId, s.clazz, s.email, b.branchId, b.name AS bname, b.selected, b.limited FROM student s, branch b WHERE s.branchId = b.branchId AND b.branchid = (SELECT branchid FROM course WHERE courseid = (SELECT courseid FROM course_leader WHERE tid = #{tid}))
    </select>
</mapper>